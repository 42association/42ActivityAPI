openapi: '3.0.2'
info:
  title: 42Activity API
  description: "アクティビティを管理するAPIです"
  version: '1.0'
servers:
  - url: http://localhost:8000
paths:
  /shift:
    get:
      summary: "シフトの取得"
      description: "特定の日付のシフトを担当するUserの配列を返します"
      parameters:
        - name: date
          in: query
          required: false
          description: "絞り込む日付、未指定の場合は現在の日付"
          schema: {type: string, example: "2024-05-01"}
      responses:
        '200':
          description: "成功。Userの配列をjsonで返します"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/shiftData'
        '400':
          description: "失敗。エラーメッセージをjsonで返します"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: "シフトの追加"
      description: "日付とそれに対応した複数loginをDBに反映する"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/importShiftData'
              required:
                - shift
      responses:
        '200':
          description: "成功。追加した日付一覧をjsonで返します"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/addedDate'
        '400':
          description: "失敗。エラーメッセージをjsonで返します"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /shift/exchange:
    post:
      summary: "シフトの交換"
      description: "特定のシフトの担当者を交換します"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/exchangeShiftData'
              required:
                - login1
                - login2
                - date1
                - date2
      responses:
        '200':
          description: "成功。交換後のシフトの配列を返します"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responseExchangeDataArray'
        '400':
          description: "失敗。エラーメッセージをjsonで返します"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /users:
    post:
      summary: "ユーザの追加"
      description: "任意人数のlogin, uid, walletをDBに追加します"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/importUserData'
              required:
                - users
      responses:
        '200':
          description: "成功。追加したuserの配列をjsonで返します"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responseUserDataArray'
        '400':
          description: "失敗。エラーメッセージと追加に成功したuserの配列をjsonで返します"
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: {type: string, example: "Error message"}
                  users: {type: array, example: ["a", "b", "c"]}
    put:
      summary: "ユーザの編集"
      description: "intra名に紐づくuidやwalletアドレスを更新します"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserData'
              required:
                - login
      responses:
        '200':
          description: "成功。更新したユーザをjsonで返します"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserData'
        '400':
          description: "失敗。エラーメッセージをjsonで返します"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /activities:
    post:
      summary: "アクティビティの追加"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ActivityData'
              required:
                - mac
                - uid
      responses:
        '200':
          description: "成功。uidとmacをjsonで返します"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActivityData'
        '400':
          description: "失敗。エラーメッセージをjsonで返します"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /activities/cleanings:
    get:
      summary: "掃除データの取得"
      description: "指定した期間でrole(cleaning)に紐づくデータを返します"
      parameters:
        - name: start
          in: query
          required: false
          description: "絞り込む期間の開始時刻(Unix秒)、未指定の場合は現在の日付の午前0時"
          schema: {type: string, example: '1711966578', default: '1711897200'}
        - name: end
          in: query
          required: false
          description: "絞り込む期間の終了時刻(Unix秒)、未指定の場合はstart+24時間"
          schema: {type: string, example: '1713176178', default: '1711983600'}
      responses:
        '200':
          description: "成功。掃除データをjsonで返します"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/cleaningsData'
        '400':
          description: "失敗。エラーメッセージをjsonで返します"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /roles:
    post:
      summary: "ロールの追加"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoleData'
              required:
                - name
      responses:
        '200':
          description: "成功。追加したロールをjsonで返します"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoleData'
        '400':
          description: "失敗。エラーメッセージをjsonで返します"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /locations:
    post:
      summary: "場所の追加"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LocationData'
              required:
                - name
      responses:
        '200':
          description: "成功。追加した場所をjsonで返します"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LocationData'
        '400':
          description: "失敗。エラーメッセージをjsonで返します"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /m5sticks:
    post:
      summary: "M5Stickの追加"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/M5StickData'
              required:
                - mac
                - role
                - location
      responses:
        '200':
          description: "成功。追加したM5Stickをjsonで返します"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/M5StickData'
        '400':
          description: "失敗。エラーメッセージをjsonで返します"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
components:
  schemas:
    shiftData:
      type: array
      items:
        type: object
        properties:
            Shift:
              $ref: '#/components/schemas/Shift'
    importShiftData:
      type: array
      items:
        type: object
        properties:
          date:
            type: string
            format: date
            example: "2024-05-01"
          login:
            type: array
            items:
              type: string
            example: ["user1", "user2"]
      example:
        - date: "2024-05-01"
          login: ["user1", "user2"]
        - date: "2024-05-02"
          login: ["user3", "user4"]
    exchangeShiftData:
      type: object
      properties:
        login1:
          type: string
          example: "login1"
        login2:
          type: string
          example: "login2"
        date1:
          type: string
          example: "YYYY-MM-DD"
        date2:
          type: string
          example: "YYYY-MM-DD"
    responseExchangeDataArray:
      type: object
      properties:
        shifts:
          type: array
          items:
            type: object
            $ref: '#/components/schemas/Shift'
    importUserData:
      type: object
      properties:
        users: 
          type: array
          items: 
            $ref: '#/components/schemas/UserData'
    responseUserDataArray:
      type: object
      properties:
        users: 
          type: array
          example: ["a", "b", "c"]
    addedDate:
      type: object
      properties:
        date: {type: array, example: ["2024-05-01", "2024-05-02"]}
    ActivityData:
      type: object
      properties:
        mac: {type: string, example: "00:00:00:00:00:00"}
        uid: {type: string, example: "foo"}
    cleaningsData:
      type: array
      items:
        type: object
        properties:
          ID: {type: integer, example: 1}
          UserID: {type: integer, example: 1}
          User:
            $ref: '#/components/schemas/User'
          M5StickID: {type: integer, example: 1}
          M5Stick:
            $ref: '#/components/schemas/M5Stick'
          CreatedAt: {type: integer, example: 1712666900}
    User:
      type: object
      properties:
        ID: {type: integer, example: 1}
        UID: {type: string, example: "foo"}
        Login: {type: string, example: "kakiba"}
        Wallet: {type: string, example: "0xA0D9F5854A77D4906906BCEDAAEBB3A39D61165A"}
    Shift:
      type: object
      properties:
        ID: {type: integer, example: 1}
        Date: {type: string, example: "2024-05-01"}
        UserID: {type: integer, example: 1}
        User:
          $ref: '#/components/schemas/User'
    M5Stick:
      type: object
      properties:
        ID: {type: integer, example: 1}
        Mac: {type: string, example: "00:00:00:00:00:00"}
        RoleId: {type: integer, example: 1}
        Role:
          $ref: '#/components/schemas/Role'
        LocationId: {type: integer, example: 1}
        Location:
          $ref: '#/components/schemas/Location'
    Role:
      type: object
      properties:
        ID: {type: integer, example: 1}
        Name: {type: string, example: "Cleaning"}
    Location:
      type: object
      properties:
        ID: {type: integer, example: 1}
        Name: {type: string, example: "F1"}
    UserData:
      type: object
      properties:
        login: {type: string, example: "kakiba", description: "intra名"}
        uid: {type: string, example: "foo", description: "intra名に紐づくuid"}
        wallet: {type: string, example: "0xA0D9F5854A77D4906906BCEDAAEBB3A39D61165A", description: "walletアドレス"}
    RoleData:
      type: object
      properties:
        name: {type: string, example: "Cleaning"}
    LocationData:
      type: object
      properties:
        name: {type: string, example: "F1"}
    M5StickData:
      type: object
      properties:
        mac: {type: string, example: "00:00:00:00:00:00"}
        role: {type: string, example: "Cleaning"}
        location: {type: string, example: "F1"}
    Error:
      type: object
      properties:
        error: {type: string, example: "Error message"}
